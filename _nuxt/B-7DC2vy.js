const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./BOwyxOmH.js","./afhrztPQ.js"])))=>i.map(i=>d[i]);
import{ak as d,al as w,am as p,an as u}from"#entry";async function g(t,r){return await $fetch(`/__nuxt_content/${r}/sql_dump.txt`,{context:{},responseType:"text",headers:{"content-type":"text/plain"},query:{v:d[String(r)],t:void 0}})}async function h(t,r="gzip"){const e=Uint8Array.from(atob(t),s=>s.charCodeAt(0)),o=new Response(new Blob([e])).body?.pipeThrough(new DecompressionStream(r)),c=await new Response(o).text();return JSON.parse(c)}function f(t,r){const e=S(t),n={...r};for(const o in n)e[o]==="json"&&n[o]&&n[o]!=="undefined"&&(n[o]=JSON.parse(n[o])),e[o]==="boolean"&&n[o]!=="undefined"&&(n[o]=!!n[o]);for(const o in n)n[o]==="NULL"&&(n[o]=void 0);return n}function S(t){const r=t.match(/FROM\s+(\w+)/);return r?w[b(r[1])]?.fields||{}:{}}function b(t){return t.replace(/^_content_/,"")}let a;const l={},i={};function D(t){async function r(e){return a||(i._=i._||_(),a=await i._,Reflect.deleteProperty(i,"_")),l[String(e)]||(i[String(e)]=i[String(e)]||y(e),await i[String(e)],l[String(e)]="loaded",Reflect.deleteProperty(i,String(e))),a}return{all:async(e,n)=>(await r(t),a.exec({sql:e,bind:n,rowMode:"object",returnValue:"resultRows"}).map(o=>f(e,o))),first:async(e,n)=>(await r(t),f(e,a.exec({sql:e,bind:n,rowMode:"object",returnValue:"resultRows"}).shift())),exec:async(e,n)=>{await r(t),await a.exec({sql:e,bind:n})}}}async function _(){if(!a){const t=await p(()=>import("./BOwyxOmH.js"),__vite__mapDeps([0,1]),import.meta.url).then(e=>e.default);globalThis.sqlite3ApiConfig={silent:!0,debug:(...e)=>console.debug(...e),warn:(...e)=>{String(e[0]).includes("OPFS sqlite3_vfs")||console.warn(...e)},error:(...e)=>console.error(...e),log:(...e)=>console.log(...e)};const r=await t();a=new r.oo1.DB}return a}async function y(t){if(window.sessionStorage.getItem("previewToken"))return a;let r=null;const e=`checksum_${t}`,n=`collection_${t}`;let o="matched";try{a.exec({sql:`SELECT * FROM ${u.info} where id = '${e}'`,rowMode:"object",returnValue:"resultRows"}).shift()?.version!==d[String(t)]&&(o="mismatch")}catch{o="missing"}if(o!=="matched"){if(window.localStorage.getItem(`content_${e}`)===d[String(t)]&&(r=window.localStorage.getItem(`content_${n}`)),!r){r=await g(void 0,String(t));try{window.localStorage.setItem(`content_${e}`,d[String(t)]),window.localStorage.setItem(`content_${n}`,r)}catch(s){console.error("Database integrity check failed, rebuilding database",s)}}const c=await h(r);await a.exec({sql:`DROP TABLE IF EXISTS ${u[String(t)]}`}),o==="mismatch"&&await a.exec({sql:`DELETE FROM ${u.info} WHERE id = '${e}'`});for(const s of c)try{await a.exec(s)}catch(m){console.error("Error executing command",m)}}return a}export{D as loadDatabaseAdapter};
